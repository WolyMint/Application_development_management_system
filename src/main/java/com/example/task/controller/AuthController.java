package com.example.task.controller;

import com.example.task.model.User;
import com.example.task.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
public class AuthController {
    private final UserService userService;

    public AuthController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/register")
    public String getRegisterPage(Model model){
        model.addAttribute("registerRequest", new User());
        return "register_page";
    }

    @GetMapping("/login")
    public String getLoginPage(Model model) {
        model.addAttribute("loginRequest", new User());
        return "login_page";
    }

    @PostMapping("/register")
    public String register(@ModelAttribute("registerRequest") User user){
        System.out.println("Register request: " + user);

        try {
            userService.create(user); // üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–∞—Å—á—ë—Ç–æ–º –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            return "redirect:/login";
        } catch (IllegalStateException e) {
            System.out.println("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return "error_page"; // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –º–æ–¥–µ–ª—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
    }

    @PostMapping("/login")
    public String login(@ModelAttribute("loginRequest") User user, HttpSession session) {
        User authenticated = userService.authentication(user.getLogin(), user.getPassword());

        if (authenticated != null) {
            session.setAttribute("user", authenticated);
            return "redirect:/personal_page"; // ‚úÖ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–∏—á–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        } else {
            return "error_page";
        }
    }

    @GetMapping("/profile")
    public String profile(HttpSession session, Model model) {
        User user = (User) session.getAttribute("user");
        if (user == null) {
            return "redirect:/login";
        }
        model.addAttribute("user", user);
        return "profile";
    }

    @PostMapping("/profile")
    public String updateProfile(@ModelAttribute("user") User updatedUser, HttpSession session) {
        User currentUser = (User) session.getAttribute("user");
        if (currentUser == null) {
            return "redirect:/login";
        }

        // –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Å–µ—Ä–≤–∏—Å –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        userService.updateProfile(currentUser.getId(), updatedUser);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session.setAttribute("user", userService.findById(currentUser.getId()));
        return "redirect:/profile";
    }

}
